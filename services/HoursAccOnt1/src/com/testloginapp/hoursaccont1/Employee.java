/*Copyright (c) 2017-2018 vanenburgsoftware.com All Rights Reserved.
 This software is the confidential and proprietary information of vanenburgsoftware.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with vanenburgsoftware.com*/
package com.testloginapp.hoursaccont1;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.util.List;
import java.util.Objects;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonProperty.Access;

/**
 * Employee generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`Employee`")
public class Employee implements Serializable {

    private Integer emplId;
    private String empName;
    private String role;
    private Integer department;
    @JsonProperty(access = Access.READ_ONLY)
    private byte[] image;
    private String address;
    private String phone;
    private String email;
    private Department departmentByDepartment;
    private List<HoursLogged> hoursLoggedsForEmplId;
    private List<HoursLogged> hoursLoggedsForManagerId;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "`EmplID`", nullable = false, scale = 0, precision = 10)
    public Integer getEmplId() {
        return this.emplId;
    }

    public void setEmplId(Integer emplId) {
        this.emplId = emplId;
    }

    @Column(name = "`EmpName`", nullable = true, length = 255)
    public String getEmpName() {
        return this.empName;
    }

    public void setEmpName(String empName) {
        this.empName = empName;
    }

    @Column(name = "`Role`", nullable = true, length = 255)
    public String getRole() {
        return this.role;
    }

    public void setRole(String role) {
        this.role = role;
    }

    @Column(name = "`Department`", nullable = true, scale = 0, precision = 10)
    public Integer getDepartment() {
        return this.department;
    }

    public void setDepartment(Integer department) {
        this.department = department;
    }

    @Column(name = "`Image`", nullable = true)
    public byte[] getImage() {
        return this.image;
    }

    public void setImage(byte[] image) {
        this.image = image;
    }

    @Column(name = "`Address`", nullable = true, length = 255)
    public String getAddress() {
        return this.address;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    @Column(name = "`Phone`", nullable = true, length = 255)
    public String getPhone() {
        return this.phone;
    }

    public void setPhone(String phone) {
        this.phone = phone;
    }

    @Column(name = "`Email`", nullable = true, length = 255)
    public String getEmail() {
        return this.email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`Department`", referencedColumnName = "`DeptID`", insertable = false, updatable = false)
    public Department getDepartmentByDepartment() {
        return this.departmentByDepartment;
    }

    public void setDepartmentByDepartment(Department departmentByDepartment) {
        if(departmentByDepartment != null) {
            this.department = departmentByDepartment.getDeptId();
        }

        this.departmentByDepartment = departmentByDepartment;
    }

    @JsonInclude(Include.NON_EMPTY)
    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.REMOVE, mappedBy = "employeeByEmplId")
    public List<HoursLogged> getHoursLoggedsForEmplId() {
        return this.hoursLoggedsForEmplId;
    }

    public void setHoursLoggedsForEmplId(List<HoursLogged> hoursLoggedsForEmplId) {
        this.hoursLoggedsForEmplId = hoursLoggedsForEmplId;
    }

    @JsonInclude(Include.NON_EMPTY)
    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.REMOVE, mappedBy = "employeeByManagerId")
    public List<HoursLogged> getHoursLoggedsForManagerId() {
        return this.hoursLoggedsForManagerId;
    }

    public void setHoursLoggedsForManagerId(List<HoursLogged> hoursLoggedsForManagerId) {
        this.hoursLoggedsForManagerId = hoursLoggedsForManagerId;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Employee)) return false;
        final Employee employee = (Employee) o;
        return Objects.equals(getEmplId(), employee.getEmplId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getEmplId());
    }
}

