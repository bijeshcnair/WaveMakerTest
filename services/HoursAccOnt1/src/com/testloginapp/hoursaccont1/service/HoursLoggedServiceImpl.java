/*Copyright (c) 2017-2018 vanenburgsoftware.com All Rights Reserved.
 This software is the confidential and proprietary information of vanenburgsoftware.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with vanenburgsoftware.com*/
package com.testloginapp.hoursaccont1.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testloginapp.hoursaccont1.HoursLogged;


/**
 * ServiceImpl object for domain model class HoursLogged.
 *
 * @see HoursLogged
 */
@Service("HoursAccOnt1.HoursLoggedService")
public class HoursLoggedServiceImpl implements HoursLoggedService {

    private static final Logger LOGGER = LoggerFactory.getLogger(HoursLoggedServiceImpl.class);


    @Autowired
    @Qualifier("HoursAccOnt1.HoursLoggedDao")
    private WMGenericDao<HoursLogged, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<HoursLogged, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "HoursAccOnt1TransactionManager")
    @Override
	public HoursLogged create(HoursLogged hoursLogged) {
        LOGGER.debug("Creating a new HoursLogged with information: {}", hoursLogged);
        HoursLogged hoursLoggedCreated = this.wmGenericDao.create(hoursLogged);
        return hoursLoggedCreated;
    }

	@Transactional(readOnly = true, value = "HoursAccOnt1TransactionManager")
	@Override
	public HoursLogged getById(Integer hoursloggedId) throws EntityNotFoundException {
        LOGGER.debug("Finding HoursLogged by id: {}", hoursloggedId);
        HoursLogged hoursLogged = this.wmGenericDao.findById(hoursloggedId);
        if (hoursLogged == null){
            LOGGER.debug("No HoursLogged found with id: {}", hoursloggedId);
            throw new EntityNotFoundException(String.valueOf(hoursloggedId));
        }
        return hoursLogged;
    }

    @Transactional(readOnly = true, value = "HoursAccOnt1TransactionManager")
	@Override
	public HoursLogged findById(Integer hoursloggedId) {
        LOGGER.debug("Finding HoursLogged by id: {}", hoursloggedId);
        return this.wmGenericDao.findById(hoursloggedId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "HoursAccOnt1TransactionManager")
	@Override
	public HoursLogged update(HoursLogged hoursLogged) throws EntityNotFoundException {
        LOGGER.debug("Updating HoursLogged with information: {}", hoursLogged);
        this.wmGenericDao.update(hoursLogged);

        Integer hoursloggedId = hoursLogged.getId();

        return this.wmGenericDao.findById(hoursloggedId);
    }

    @Transactional(value = "HoursAccOnt1TransactionManager")
	@Override
	public HoursLogged delete(Integer hoursloggedId) throws EntityNotFoundException {
        LOGGER.debug("Deleting HoursLogged with id: {}", hoursloggedId);
        HoursLogged deleted = this.wmGenericDao.findById(hoursloggedId);
        if (deleted == null) {
            LOGGER.debug("No HoursLogged found with id: {}", hoursloggedId);
            throw new EntityNotFoundException(String.valueOf(hoursloggedId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "HoursAccOnt1TransactionManager")
	@Override
	public Page<HoursLogged> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all HoursLoggeds");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "HoursAccOnt1TransactionManager")
    @Override
    public Page<HoursLogged> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all HoursLoggeds");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "HoursAccOnt1TransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service HoursAccOnt1 for table HoursLogged to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "HoursAccOnt1TransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "HoursAccOnt1TransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

