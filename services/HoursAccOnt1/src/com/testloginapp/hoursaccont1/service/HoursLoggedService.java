/*Copyright (c) 2017-2018 vanenburgsoftware.com All Rights Reserved.
 This software is the confidential and proprietary information of vanenburgsoftware.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with vanenburgsoftware.com*/
package com.testloginapp.hoursaccont1.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testloginapp.hoursaccont1.HoursLogged;

/**
 * Service object for domain model class {@link HoursLogged}.
 */
public interface HoursLoggedService {

    /**
     * Creates a new HoursLogged. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on HoursLogged if any.
     *
     * @param hoursLogged Details of the HoursLogged to be created; value cannot be null.
     * @return The newly created HoursLogged.
     */
	HoursLogged create(HoursLogged hoursLogged);


	/**
	 * Returns HoursLogged by given id if exists.
	 *
	 * @param hoursloggedId The id of the HoursLogged to get; value cannot be null.
	 * @return HoursLogged associated with the given hoursloggedId.
     * @throws EntityNotFoundException If no HoursLogged is found.
	 */
	HoursLogged getById(Integer hoursloggedId) throws EntityNotFoundException;

    /**
	 * Find and return the HoursLogged by given id if exists, returns null otherwise.
	 *
	 * @param hoursloggedId The id of the HoursLogged to get; value cannot be null.
	 * @return HoursLogged associated with the given hoursloggedId.
	 */
	HoursLogged findById(Integer hoursloggedId);


	/**
	 * Updates the details of an existing HoursLogged. It replaces all fields of the existing HoursLogged with the given hoursLogged.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on HoursLogged if any.
     *
	 * @param hoursLogged The details of the HoursLogged to be updated; value cannot be null.
	 * @return The updated HoursLogged.
	 * @throws EntityNotFoundException if no HoursLogged is found with given input.
	 */
	HoursLogged update(HoursLogged hoursLogged) throws EntityNotFoundException;

    /**
	 * Deletes an existing HoursLogged with the given id.
	 *
	 * @param hoursloggedId The id of the HoursLogged to be deleted; value cannot be null.
	 * @return The deleted HoursLogged.
	 * @throws EntityNotFoundException if no HoursLogged found with the given id.
	 */
	HoursLogged delete(Integer hoursloggedId) throws EntityNotFoundException;

	/**
	 * Find all HoursLoggeds matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching HoursLoggeds.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<HoursLogged> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all HoursLoggeds matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching HoursLoggeds.
     *
     * @see Pageable
     * @see Page
	 */
    Page<HoursLogged> findAll(String query, Pageable pageable);

    /**
	 * Exports all HoursLoggeds matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the HoursLoggeds in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the HoursLogged.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}

